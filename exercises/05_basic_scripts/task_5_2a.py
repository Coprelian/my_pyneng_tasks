# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

ip_mask = input('Введите ip и mask в формате (1.1.1.1/24) ').split('/')
ip = ip_mask[0].split('.')
mask = '1' * int(ip_mask[1]) + (32 - int(ip_mask[1])) * '0'
list_mask_bin = [mask[:8], mask[8:16], mask[16:24], mask[24:]]
list_mask_int = [int(list_mask_bin[0], base = 2), int(list_mask_bin[1], base = 2), int(list_mask_bin[2], base = 2), int(list_mask_bin[3], base = 2)]
network = [int(ip[0]) & list_mask_int[0], int(ip[1]) & list_mask_int[1], int(ip[2]) & list_mask_int[2], int(ip[3]) & list_mask_int[3]]

template = '''
\n
Network:
{0:<8}  {1:<8}  {2:<8}  {3:<8}
{4:08b}  {5:08b}  {6:08b}  {7:08b}

Mask:
/{8}
{9:<8}  {10:<8}  {11:<8}  {12:<8}
{13:8}  {14:8}  {15:8}  {16:8}

'''

print(template.format(network[0],network[1],network[2],network[3],
                      network[0],network[1],network[2],network[3],
                      ip_mask[1],
                      list_mask_int[0], list_mask_int[1], list_mask_int[2], list_mask_int[3],
                      list_mask_bin[0], list_mask_bin[1], list_mask_bin[2], list_mask_bin[3]))